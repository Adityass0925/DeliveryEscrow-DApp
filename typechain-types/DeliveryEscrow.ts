/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface DeliveryEscrowInterface extends utils.Interface {
  functions: {
    "confirmDelivery(uint256)": FunctionFragment;
    "createEscrow(uint256,address,string)": FunctionFragment;
    "deliveries(uint256)": FunctionFragment;
    "getDeliveryDetails(uint256)": FunctionFragment;
    "releasePayment(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "confirmDelivery"
      | "createEscrow"
      | "deliveries"
      | "getDeliveryDetails"
      | "releasePayment"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "confirmDelivery",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createEscrow",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deliveries",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeliveryDetails",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "releasePayment",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "confirmDelivery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deliveries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDeliveryDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releasePayment",
    data: BytesLike
  ): Result;

  events: {
    "DeliveryConfirmed(uint256)": EventFragment;
    "EscrowCreated(uint256,address,address,uint256,string)": EventFragment;
    "PaymentReleased(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeliveryConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EscrowCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReleased"): EventFragment;
}

export interface DeliveryConfirmedEventObject {
  jobId: BigNumber;
}
export type DeliveryConfirmedEvent = TypedEvent<
  [BigNumber],
  DeliveryConfirmedEventObject
>;

export type DeliveryConfirmedEventFilter =
  TypedEventFilter<DeliveryConfirmedEvent>;

export interface EscrowCreatedEventObject {
  jobId: BigNumber;
  client: string;
  contractor: string;
  amount: BigNumber;
  itemDetails: string;
}
export type EscrowCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  EscrowCreatedEventObject
>;

export type EscrowCreatedEventFilter = TypedEventFilter<EscrowCreatedEvent>;

export interface PaymentReleasedEventObject {
  jobId: BigNumber;
  contractor: string;
  amount: BigNumber;
}
export type PaymentReleasedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  PaymentReleasedEventObject
>;

export type PaymentReleasedEventFilter = TypedEventFilter<PaymentReleasedEvent>;

export interface DeliveryEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeliveryEscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    confirmDelivery(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createEscrow(
      jobId: PromiseOrValue<BigNumberish>,
      contractor: PromiseOrValue<string>,
      itemDetails: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deliveries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, boolean, boolean] & {
        client: string;
        contractor: string;
        itemDetails: string;
        amount: BigNumber;
        completed: boolean;
        fundsReleased: boolean;
      }
    >;

    getDeliveryDetails(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, boolean, boolean] & {
        client: string;
        contractor: string;
        itemDetails: string;
        amount: BigNumber;
        completed: boolean;
        fundsReleased: boolean;
      }
    >;

    releasePayment(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  confirmDelivery(
    jobId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createEscrow(
    jobId: PromiseOrValue<BigNumberish>,
    contractor: PromiseOrValue<string>,
    itemDetails: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deliveries(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, boolean, boolean] & {
      client: string;
      contractor: string;
      itemDetails: string;
      amount: BigNumber;
      completed: boolean;
      fundsReleased: boolean;
    }
  >;

  getDeliveryDetails(
    jobId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, boolean, boolean] & {
      client: string;
      contractor: string;
      itemDetails: string;
      amount: BigNumber;
      completed: boolean;
      fundsReleased: boolean;
    }
  >;

  releasePayment(
    jobId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    confirmDelivery(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createEscrow(
      jobId: PromiseOrValue<BigNumberish>,
      contractor: PromiseOrValue<string>,
      itemDetails: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deliveries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, boolean, boolean] & {
        client: string;
        contractor: string;
        itemDetails: string;
        amount: BigNumber;
        completed: boolean;
        fundsReleased: boolean;
      }
    >;

    getDeliveryDetails(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, boolean, boolean] & {
        client: string;
        contractor: string;
        itemDetails: string;
        amount: BigNumber;
        completed: boolean;
        fundsReleased: boolean;
      }
    >;

    releasePayment(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DeliveryConfirmed(uint256)"(jobId?: null): DeliveryConfirmedEventFilter;
    DeliveryConfirmed(jobId?: null): DeliveryConfirmedEventFilter;

    "EscrowCreated(uint256,address,address,uint256,string)"(
      jobId?: null,
      client?: null,
      contractor?: null,
      amount?: null,
      itemDetails?: null
    ): EscrowCreatedEventFilter;
    EscrowCreated(
      jobId?: null,
      client?: null,
      contractor?: null,
      amount?: null,
      itemDetails?: null
    ): EscrowCreatedEventFilter;

    "PaymentReleased(uint256,address,uint256)"(
      jobId?: null,
      contractor?: null,
      amount?: null
    ): PaymentReleasedEventFilter;
    PaymentReleased(
      jobId?: null,
      contractor?: null,
      amount?: null
    ): PaymentReleasedEventFilter;
  };

  estimateGas: {
    confirmDelivery(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createEscrow(
      jobId: PromiseOrValue<BigNumberish>,
      contractor: PromiseOrValue<string>,
      itemDetails: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deliveries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeliveryDetails(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releasePayment(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    confirmDelivery(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createEscrow(
      jobId: PromiseOrValue<BigNumberish>,
      contractor: PromiseOrValue<string>,
      itemDetails: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deliveries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeliveryDetails(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releasePayment(
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
